/*
 * Windmill server API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.39.0
 * Contact: contact@windmill.dev
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FlowStatusModule {
    #[serde(rename = "type")]
    pub r#type: RHashType,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "job", skip_serializing_if = "Option::is_none")]
    pub job: Option<uuid::Uuid>,
    #[serde(rename = "count", skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(rename = "iterator", skip_serializing_if = "Option::is_none")]
    pub iterator: Option<Box<crate::models::FlowStatusModuleIterator>>,
    #[serde(rename = "flow_jobs", skip_serializing_if = "Option::is_none")]
    pub flow_jobs: Option<Vec<String>>,
    #[serde(rename = "branch_chosen", skip_serializing_if = "Option::is_none")]
    pub branch_chosen: Option<Box<crate::models::FlowStatusModuleBranchChosen>>,
    #[serde(rename = "branchall", skip_serializing_if = "Option::is_none")]
    pub branchall: Option<Box<crate::models::FlowStatusModuleBranchall>>,
}

impl FlowStatusModule {
    pub fn new(r#type: RHashType) -> FlowStatusModule {
        FlowStatusModule {
            r#type,
            id: None,
            job: None,
            count: None,
            iterator: None,
            flow_jobs: None,
            branch_chosen: None,
            branchall: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "WaitingForPriorSteps")]
    WaitingForPriorSteps,
    #[serde(rename = "WaitingForEvent")]
    WaitingForEvent,
    #[serde(rename = "WaitingForExecutor")]
    WaitingForExecutor,
    #[serde(rename = "InProgress")]
    InProgress,
    #[serde(rename = "Success")]
    Success,
    #[serde(rename = "Failure")]
    Failure,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::WaitingForPriorSteps
    }
}

