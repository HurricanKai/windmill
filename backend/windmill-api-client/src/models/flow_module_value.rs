/*
 * Windmill server API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.39.0
 * Contact: contact@windmill.dev
 * Generated by: https://openapi-generator.tech
 */



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(tag = "r#type")]
pub enum FlowModuleValue {
    #[serde(rename="branchall")]
    BranchAll {
        #[serde(rename = "branches")]
        branches: Vec<crate::models::BranchAllBranchesInner>,
    },
    #[serde(rename="branchone")]
    BranchOne {
        #[serde(rename = "branches")]
        branches: Vec<crate::models::BranchOneBranchesInner>,
        #[serde(rename = "default")]
        default: Vec<crate::models::FlowModule>,
    },
    #[serde(rename="forloopflow")]
    ForloopFlow {
        #[serde(rename = "modules")]
        modules: Vec<crate::models::FlowModule>,
        #[serde(rename = "iterator")]
        iterator: Box<crate::models::InputTransform>,
        #[serde(rename = "skip_failures")]
        skip_failures: bool,
    },
    #[serde(rename="rawscript")]
    RawScript {
        #[serde(rename = "input_transforms", skip_serializing_if = "Option::is_none")]
        input_transforms: Option<::std::collections::HashMap<String, crate::models::InputTransform>>,
        #[serde(rename = "content")]
        content: String,
        #[serde(rename = "language")]
        language: Language,
        #[serde(rename = "path", skip_serializing_if = "Option::is_none")]
        path: Option<String>,
    },
    #[serde(rename="script")]
    PathScript {
        #[serde(rename = "input_transforms", skip_serializing_if = "Option::is_none")]
        input_transforms: Option<::std::collections::HashMap<String, crate::models::InputTransform>>,
        #[serde(rename = "path")]
        path: String,
    },
}



/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Language {
    #[serde(rename = "deno")]
    Deno,
    #[serde(rename = "python3")]
    Python3,
    #[serde(rename = "go")]
    Go,
}

impl Default for Language {
    fn default() -> Language {
        Self::Deno
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "branchall")]
    Branchall,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::Branchall
    }
}

