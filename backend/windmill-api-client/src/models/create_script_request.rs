/*
 * Windmill server API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.39.0
 * Contact: contact@windmill.dev
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CreateScriptRequest {
    #[serde(rename = "path")]
    pub path: String,
    #[serde(rename = "parent_hash", skip_serializing_if = "Option::is_none")]
    pub parent_hash: Option<String>,
    #[serde(rename = "summary")]
    pub summary: String,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "content")]
    pub content: String,
    #[serde(rename = "schema", skip_serializing_if = "Option::is_none")]
    pub schema: Option<serde_json::Value>,
    #[serde(rename = "is_template", skip_serializing_if = "Option::is_none")]
    pub is_template: Option<bool>,
    #[serde(rename = "lock", skip_serializing_if = "Option::is_none")]
    pub lock: Option<Vec<String>>,
    #[serde(rename = "language")]
    pub language: Language,
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<Kind>,
}

impl CreateScriptRequest {
    pub fn new(path: String, summary: String, description: String, content: String, language: Language) -> CreateScriptRequest {
        CreateScriptRequest {
            path,
            parent_hash: None,
            summary,
            description,
            content,
            schema: None,
            is_template: None,
            lock: None,
            language,
            kind: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Language {
    #[serde(rename = "python3")]
    Python3,
    #[serde(rename = "deno")]
    Deno,
    #[serde(rename = "go")]
    Go,
}

impl Default for Language {
    fn default() -> Language {
        Self::Python3
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Kind {
    #[serde(rename = "script")]
    Script,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "trigger")]
    Trigger,
    #[serde(rename = "command")]
    Command,
    #[serde(rename = "approval")]
    Approval,
}

impl Default for Kind {
    fn default() -> Kind {
        Self::Script
    }
}

